import axios from "axios";

const createAxiosInstance = (prefix = '') => {
    const instance = axios.create({
        baseURL: `https://localhost:7129/${prefix}`,
    });

    instance.interceptors.request.use(config => {
        const token = localStorage.getItem('token');
        if (token) {
            config.headers['Authorization'] = `Bearer ${token}`;
        }
        return config;
    }, error => {
        return Promise.reject(error);
    });

    async function refreshToken() {
        console.log("‚ö° –ó–∞–ø—É—Å–∫ refreshToken()...");
    
        try {
            const response = await axios.post('https://localhost:7129/user/login-refresh', {
                refreshToken: localStorage.getItem('refreshToken'),
            });
    
            console.log("üîÑ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ refreshToken:", response.data);
    
            if (response.status === 200) {
                console.log("‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:", response.data.accessToken);
                localStorage.setItem('token', response.data.accessToken);
                localStorage.setItem('refreshToken', response.data.refreshToken);
                return response.data.accessToken;
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error.response?.data || error.message);
            return null;
        }
    }
    
    

    instance.interceptors.response.use(response => {
        return response;
    }, async error => {
        console.log("‚ö†Ô∏è –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
    
        if (!error.response) {
            console.log("‚ùå –û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª! –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å CORS.");
            return Promise.reject(error);
        }
    
        const originalRequest = error.config;
    
        if (error.response.status === 401) {
            console.log("üîÅ –û—à–∏–±–∫–∞ 401! –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω...");
    
            if (!originalRequest._retry) {
                originalRequest._retry = true;
                const newAccessToken = await refreshToken();
    
                if (!newAccessToken) {
                    console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω!");
                    return Promise.reject(error);
                }
    
                console.log("‚úÖ –ù–æ–≤—ã–π Access Token:", newAccessToken);
                originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;
                return instance(originalRequest);
            }
        }
    
        return Promise.reject(error);
    });
    
    
    return instance;
};

export default createAxiosInstance;
